package com.fymod.ftf.util;import java.net.InetAddress;import java.net.NetworkInterface;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Enumeration;import java.util.List;import java.util.Map;import java.util.Random;import java.util.Set;import org.apache.log4j.Logger;public class CommonUtil {	private static Logger logger = Logger.getLogger(CommonUtil.class);	/**	 * @param key 关键字（查询索引，英文字符串）	 * @param content 消息	 */	public static void systemOut(String key, String content) {		logger.debug(key + "--" + content);	}	/** * @function != null */	public static Boolean notEmpty(Object objct) {		if (objct != null)			return true;		return false;	}	/** * @function != null && length > 0 */	public static Boolean notEmpty(String objct) {		if (objct != null && objct.trim().length() > 0)			return true;		return false;	}	/** * @function != null && size > 0 */	public static Boolean notEmpty(List<?> list) {		if (list != null && list.size() > 0)			return true;		return false;	}	/** * @function != null && size > 0 */	public static Boolean notEmpty(Set<?> set) {		if (set != null && set.size() > 0)			return true;		return false;	}	/** * @function != null */	public static Boolean notEmpty(Map<?, ?> map) {		if (map != null && !map.isEmpty())			return true;		return false;	}	/** * @function != null */	public static Boolean notEmpty(Map<?, ?> map, Object key) {		if (map != null && map.get(key) != null)			return true;		return false;	}	/** * @function 判断是否 > 0 */	public static Boolean greaterThanZero(Long l) {		if (notEmpty(l) && l > 0)			return true;		return false;	}	/** * @function 判断是否 > 0 */	public static Boolean greaterThanZero(Integer l) {		if (l == null)			return false;		return greaterThanZero(Long.valueOf(l));	}	/*** @function 判断是否 < 0 */	public static Boolean lessThanZero(Long l) {		if (notEmpty(l) && l < 0)			return true;		return false;	}	/*** @function 判断是否 < 0 */	public static Boolean lessThanZero(Integer l) {		if (l == null)			return false;		return lessThanZero(Long.valueOf(l));	}	/** String类型转Long集合**/	public static List<Long> parseStringToLong(String string, String splitString) {		List<Long> list = new ArrayList<Long>();		String[] s = string.split(splitString);		for (String o : s) {			if (CommonUtil.notEmpty(o)) {				list.add(Long.valueOf(o));			}		}		return list;	}	/** String类型转Integer集合**/	public static List<Integer> parseStringToInteger(String string,			String splitString) {		List<Integer> list = new ArrayList<Integer>();		String[] s = string.split(splitString);		for (String o : s) {			if (CommonUtil.notEmpty(o)) {				list.add(Integer.valueOf(o));			}		}		return list;	}	public static String toString(Object o) {		if (o != null)			return o.toString();		return "";	}	/**	 * 生成随机字符（包含数字和字母）	 * @param pwd_len 字符长度	 */	public static String randomString(int pwd_len) {		// 34是因为数组是从0开始的，24个字母（不包含字母l，字母o）+10个数字		final int maxNum = 34;		int i; // 生成的随机数		int count = 0; // 生成的密码的长度		char[] str = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',				'm', 'n', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',				'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };		StringBuffer pwd = new StringBuffer("");		Random r = new Random();		while (count < pwd_len) {			// 生成随机数，取绝对值，防止生成负数，			i = Math.abs(r.nextInt(maxNum)); // 生成的数最大为34-1			if (i >= 0 && i < str.length) {				pwd.append(str[i]);				count++;			}		}		return pwd.toString();	}	/**	 * 生成随机字符（包含数字和字母）	 * @param pwd_len 字符长度	 */	public static String randomNumber(int pwd_len) {		final int maxNum = 11;		int i;		int count = 0;		char[] str = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };		StringBuffer pwd = new StringBuffer("");		Random r = new Random();		while (count < pwd_len) {			// 生成随机数，取绝对值，防止生成负数，			i = Math.abs(r.nextInt(maxNum));			if (i >= 0 && i < str.length) {				pwd.append(str[i]);				count++;			}		}		return pwd.toString();	}	/**获取序列码**/	public static String setSerialNumforChainOrder(Long id, String preCode) {		String str = String.format("%04d", id % 10000);		SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMddHHmm");		Date currentTime = new Date();		String newTime = dateFormat.format(currentTime);		return preCode + newTime + str;	}	/**	 * 获取Linux 服务器ip	 */	@SuppressWarnings("rawtypes")	public static String getInteAddress() {		try {			String os = System.getProperty("os.name");			if (os.startsWith("Windows")) {				return InetAddress.getLocalHost().getHostAddress();			} else if (os.startsWith("Linux")) {				Enumeration netInterfaces = NetworkInterface						.getNetworkInterfaces();				InetAddress ip = null;				while (netInterfaces.hasMoreElements()) {					NetworkInterface ni = (NetworkInterface) netInterfaces							.nextElement();					System.out.println(ni.getName());					ip = (InetAddress) ni.getInetAddresses().nextElement();					if (!ip.isSiteLocalAddress() && !ip.isLoopbackAddress()							&& ip.getHostAddress().indexOf(":") == -1) {						System.out.println("本机的ip=" + ip.getHostAddress());						return ip.getHostAddress();					} else {						ip = null;					}				}			}		} catch (Exception e) {			e.printStackTrace();		}		return "";	}		//随机6位数字	public static String generate() {		String string = "";		for (int i = 0; i < 6; i++) {			string += new Random().nextInt(10) + "";		}		return string;	}}